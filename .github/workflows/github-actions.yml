# Workflow 이름 
name: Spring Boot & Gradle CI/CD
# 
# 어떤 이벤트가 발생하면 workflow 실행할 지 명시
on:
  # main 브랜치에 push나 pull request 발생 시
  push:
    branches: [ "CICD_test_compose" ]
    
permissions:
  contents: read
  
# 
# 위 이벤트 발생 시 실행될 작업들
jobs:
  addProperties:
    runs-on: ubuntu-latest
    steps:
      - run: mkdir -p ./src/main/resources
      - run: cd ./src/main/resources
      - run: touch ./application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties
       
  build:
    needs: addProperties
    # VM의실행 환경 지정 => 우분투 최신 버전
    runs-on: ubuntu-latest

    # 실행될 jobs를 순서대로 명시
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # zulu 17 설치
      - name: Set up Zulu OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'


      # Gradle Build를 위한 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew


      # Gradle Build (test 제외)
      # gradlew 빌드
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test
      # DockerHub 로그아웃
      - name: DockerHub Logout
        run: docker logout
      # DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2

        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 빌드
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:1.0 . 

      # DockerHub Push
      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/willu:1.0

      # EC2 인스턴스 접속 및 애플리케이션 실행
      - name: Application Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22

          script: |
            cd /home/ubuntu/
            sudo docker-compose down
            sudo docker-compose up -d

            
            # sudo docker stop willu
            # sudo docker rm -f willu
            # sudo docker rmi sim3412/willu:1.0
            # sudo docker pull sim3412/willu:1.0
            
            # docker run -p 8080:8080 \
            # --name willu \
            # -d sim3412/willu:1.0
